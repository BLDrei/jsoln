package com.bldrei.jsoln;import com.bldrei.jsoln.cache.Cache;import com.bldrei.jsoln.cache.RecordDeserializationInfo;import com.bldrei.jsoln.util.DeserializeUtil;import com.bldrei.jsoln.util.SerializeUtil;import com.fasterxml.jackson.core.JsonGenerator;import com.fasterxml.jackson.databind.DeserializationFeature;import com.fasterxml.jackson.databind.JsonNode;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.node.JsonNodeFactory;import lombok.NonNull;import lombok.SneakyThrows;import org.jetbrains.annotations.NotNull;public final class Jsoln {  private Jsoln() {}  private static final ObjectMapper objectMapper = new ObjectMapper()    .enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)    .enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)    .setNodeFactory(JsonNodeFactory.withExactBigDecimals(true));  public static <T> String serialize(@NonNull @NotNull T obj) {    if (!obj.getClass().isRecord()) throw new IllegalStateException("Map not implemented yet");    var recordDeserInfo = Cache.getRecordDeserializationInfo(obj.getClass()).getClassTree(); //todo: deser info for ser????    return SerializeUtil.stringify(obj, recordDeserInfo, null);  }  @SneakyThrows  public static <T> T deserialize(@NonNull @NotNull String fullJson, @NonNull @NotNull Class<T> tClass) {    var readerOutput = objectMapper.readTree(fullJson);    return deserializeJsonTree(readerOutput, tClass);  }  private static <T> T deserializeJsonTree(@NonNull @NotNull JsonNode jsonNode, @NonNull @NotNull Class<T> tClass) {    return deserializeRecordObject(jsonNode, tClass);  }  @SuppressWarnings("unchecked")  private static <R> R deserializeRecordObject(@NotNull JsonNode jsonNode, @NotNull Class<R> tClass) {    if (!tClass.isRecord()) throw new IllegalStateException();    RecordDeserializationInfo<R> recordDeserializationInfo = Cache.getRecordDeserializationInfo(tClass);    return (R) DeserializeUtil.javaifyJsonModel(jsonNode, recordDeserializationInfo.getClassTree());  }}