package com.bldrei.jsoln;import com.bldrei.jsoln.cache.Cache;import com.bldrei.jsoln.cache.ClassDeserializationInfo;import com.bldrei.jsoln.cache.RecordDeserializationInfo;import com.bldrei.jsoln.exception.JsolnException;import com.bldrei.jsoln.jsonmodel.JsonArray;import com.bldrei.jsoln.jsonmodel.JsonBoolean;import com.bldrei.jsoln.jsonmodel.JsonElement;import com.bldrei.jsoln.jsonmodel.JsonNumber;import com.bldrei.jsoln.jsonmodel.JsonObject;import com.bldrei.jsoln.jsonmodel.JsonText;import com.bldrei.jsoln.util.ClassTree;import com.bldrei.jsoln.util.DeserializeUtil;import com.bldrei.jsoln.util.ReflectionUtil;import java.util.Optional;public final class Jsoln {  private Jsoln() {}  public static <T> String serialize(T obj) {    return "";  }  public static <T> T deserialize(String fullJson, Class<T> tClass) {    return deserialize(DeserializeUtil.parseFullJson(fullJson), tClass);  }  private static <T> T deserialize(JsonObject jsonObject, Class<T> tClass) {    Cache.cacheIfUnknown(tClass);    return tClass.isRecord()      ? deserializeRecordObject(jsonObject, tClass)      : deserializeClassObject(jsonObject, tClass);  }  private static <T> T deserializeRecordObject(JsonObject jsonObject, Class<T> tClass) {    RecordDeserializationInfo recordDeserializationInfo = Cache.recordDeserializationCache.get(tClass);    if (recordDeserializationInfo == null) throw new IllegalStateException();    Object[] params = recordDeserializationInfo.fieldsInfos().stream().map(recordComponent -> {      boolean isNullable = recordComponent.isNullable();      var value = jsonObject.get(recordComponent.name());      boolean valuePresent = value.isPresent();      if (!valuePresent && !isNullable) {        handleMissingValueForMandatoryField(recordComponent.name());        return null;      }      if (!valuePresent) {        return Optional.empty();      }      else {        Object valueOfActualType = extractValueFromJsonElement(value.get(), recordComponent.classTree());        return isNullable ? Optional.ofNullable(valueOfActualType) : valueOfActualType;      }    }).toArray();    return (T) ReflectionUtil.invokeConstructor(recordDeserializationInfo.canonicalConstructor(), params); //todo: remove (T)  }  private static <T> T deserializeClassObject(JsonObject jsonObject, Class<T> tClass) {    ClassDeserializationInfo classDeserializationInfo = Cache.classDeserializationCache.get(tClass);    if (classDeserializationInfo == null) throw new IllegalStateException();//    if (classDeserializationInfo.allArgsConstructor().isPresent()) {//      return ;//    }    if (classDeserializationInfo.noArgsConstructor().isPresent()) {      T obj = (T) ReflectionUtil.invokeConstructor(classDeserializationInfo.noArgsConstructor().get()); //todo: remove (T)      classDeserializationInfo.fieldsInfo().forEach(fieldInfo -> {        var value = jsonObject.get(fieldInfo.name());        boolean valuePresent = value.isPresent();        if (!valuePresent && !fieldInfo.isNullable()) {          handleMissingValueForMandatoryField(fieldInfo.name());          return;        }        fieldInfo.setter().ifPresent(setter -> {          if (valuePresent) {            Object valueOfActualType = extractValueFromJsonElement(value.get(), fieldInfo.classTree());            ReflectionUtil.invokeMethod(obj, setter, fieldInfo.isNullable() ? Optional.of(valueOfActualType) : valueOfActualType);          }          else {            ReflectionUtil.invokeMethod(obj, setter, Optional.empty());          }        });      });      return obj;    }    throw new IllegalStateException();  }  public static Object extractValueFromJsonElement(JsonElement val, ClassTree classTree) {    return switch (val) {      case JsonObject jo -> deserialize(jo, (Class<?>) classTree.rawType());      case JsonArray ja -> ja.getCollection(classTree);      case JsonText jt -> jt.getValue(classTree.rawType());      case JsonNumber jn -> jn.getNumericValue(classTree.rawType());      case JsonBoolean jb -> jb.getValue();    };  }  private static void handleMissingValueForMandatoryField(String fldName) {    final boolean strictMode = true;    if (strictMode) {      throw new JsolnException("Value not present, but field " + fldName + " is mandatory");    } else {      System.out.println("Warn: Value not present, but field " + fldName + " is mandatory");    }  }}