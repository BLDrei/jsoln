package com.bldrei.jsoln;import com.bldrei.jsoln.cache.Cache;import com.bldrei.jsoln.cache.RecordDeserializationInfo;import com.bldrei.jsoln.jsonmodel.JsonObject;import com.bldrei.jsoln.util.DeserializeUtil;import com.bldrei.jsoln.util.SerializeUtil;public final class Jsoln {  private Jsoln() {}  public static <T> String serialize(T obj) {    if (!obj.getClass().isRecord()) throw new IllegalStateException("Map or classes not implemented yet");    var recordDeserInfo = Cache.getRecordDeserializationInfo(obj.getClass()).getClassTree(); //todo: deser info for ser????    StringBuffer sb = switch (SerializeUtil.convertObjectToJsonElement(obj, recordDeserInfo)) {      case JsonObject jo -> jo.appendToSB(new StringBuffer());      default -> throw new IllegalStateException();    };    return sb.toString();  }  public static <T> T deserialize(String fullJson, Class<T> tClass) {    return deserialize(DeserializeUtil.parseFullJson(fullJson.strip()), tClass);  }  public static <T> T deserialize(JsonObject jsonObject, Class<T> tClass) {    return tClass.isRecord()      ? deserializeRecordObject(jsonObject, tClass)      : deserializeClassObject(jsonObject, tClass);  }  private static <R> R deserializeRecordObject(JsonObject jsonObject, Class<R> tClass) {    RecordDeserializationInfo<R> recordDeserializationInfo = Cache.getRecordDeserializationInfo(tClass);    if (recordDeserializationInfo == null) throw new IllegalStateException();    return (R) jsonObject.toObject(recordDeserializationInfo.getClassTree());  }  @SuppressWarnings("unchecked")  private static <T> T deserializeClassObject(JsonObject jsonObject, Class<T> tClass) {//    ClassDeserializationInfo classDeserializationInfo = Cache.getClassDeserializationInfo(tClass);//    if (classDeserializationInfo == null) throw new IllegalStateException();////    if (classDeserializationInfo.noArgsConstructor().isPresent()) {//      T obj = (T) ReflectionUtil.invokeConstructor(classDeserializationInfo.noArgsConstructor().get());////      classDeserializationInfo.fieldsInfo().forEach(fieldInfo -> {//        var value = jsonObject.get(fieldInfo.name());//        boolean valuePresent = value.isPresent();////        if (!valuePresent && !fieldInfo.isNullable()) {//          Configuration.missingRequiredValueHandler.accept(fieldInfo.name(), fieldInfo.dtoClass());//          return;//        }//        fieldInfo.setter().ifPresent(setter -> {//          if (valuePresent) {//            Object valueOfActualType = extractValueFromJsonElement(value.get(), fieldInfo.classTree());//            ReflectionUtil.invokeInstanceMethod(obj, setter, fieldInfo.isNullable() ? Optional.of(valueOfActualType) : valueOfActualType);//          }//          else {//            ReflectionUtil.invokeInstanceMethod(obj, setter, Optional.empty());//          }//        });//      });//      return obj;//    }    throw new IllegalStateException();  }}