package com.bldrei.jsoln;import com.bldrei.jsoln.cache.Cache;import com.bldrei.jsoln.cache.RecordDeserializationInfo;import com.bldrei.jsoln.util.DeserializeUtil;import com.bldrei.jsoln.util.SerializeUtil;import lombok.NonNull;import org.jetbrains.annotations.NotNull;import org.stringtree.json.ExceptionErrorListener;import org.stringtree.json.JSONReader;import org.stringtree.json.JSONValidatingReader;import org.stringtree.json.JSONValidatingWriter;import org.stringtree.json.JSONWriter;import java.util.Map;public final class Jsoln {  private Jsoln() {}  private static final JSONReader reader = new JSONValidatingReader(new ExceptionErrorListener());  private static final JSONWriter writer = new JSONValidatingWriter(new ExceptionErrorListener());  public static <T> String serialize(@NonNull @NotNull T obj) {    if (!obj.getClass().isRecord()) throw new IllegalStateException("Map not implemented yet");    var recordDeserInfo = Cache.getRecordDeserializationInfo(obj.getClass()).getClassTree(); //todo: deser info for ser????    return writer.write(SerializeUtil.javaObjectToJsonModel(obj, recordDeserInfo));  }  public static <T> T deserialize(@NonNull @NotNull String fullJson, @NonNull @NotNull Class<T> tClass) {    var readerOutput = fullJson.isBlank() ? fullJson : reader.read(fullJson); //since this reader returns null if string is blank    return deserializeJsonTree(readerOutput, tClass);  }  private static <T> T deserializeJsonTree(@NonNull @NotNull Object jsonObject, @NonNull @NotNull Class<T> tClass) {    return deserializeRecordObject(jsonObject, tClass);  }  @SuppressWarnings("unchecked")  private static <R> R deserializeRecordObject(@NotNull Object jsonObject, @NotNull Class<R> tClass) {    if (!tClass.isRecord()) throw new IllegalStateException();    RecordDeserializationInfo<R> recordDeserializationInfo = Cache.getRecordDeserializationInfo(tClass);    return (R) DeserializeUtil.javaifyJsonModel(jsonObject, recordDeserializationInfo.getClassTree());  }}