package com.bldrei.jsoln;import com.bldrei.jsoln.cache.Cache;import com.bldrei.jsoln.cache.RecordDeserializationInfo;import com.bldrei.jsoln.jsonmodel.AcceptedTypes;import com.bldrei.jsoln.jsonmodel.JsonArray;import com.bldrei.jsoln.jsonmodel.JsonBoolean;import com.bldrei.jsoln.jsonmodel.JsonElement;import com.bldrei.jsoln.jsonmodel.JsonNumber;import com.bldrei.jsoln.jsonmodel.JsonObject;import com.bldrei.jsoln.jsonmodel.JsonText;import com.bldrei.jsoln.util.ClassTree;import com.bldrei.jsoln.util.DeserializeUtil;import com.bldrei.jsoln.util.ReflectionUtil;import com.bldrei.jsoln.util.SerializeUtil;import java.util.Optional;public final class Jsoln {  private Jsoln() {}  public static <T> String serialize(T obj) {    if (!AcceptedTypes.isAcceptableObjectType(obj.getClass())) throw new IllegalStateException();    return SerializeUtil.appendObjectTypeToStringBuffer(obj, new StringBuffer()).toString();  }  public static <T> T deserialize(String fullJson, Class<T> tClass) {    return deserialize(DeserializeUtil.parseFullJson(fullJson.strip()), tClass);  }  public static <T> T deserialize(JsonObject jsonObject, Class<T> tClass) {    return tClass.isRecord()      ? deserializeRecordObject(jsonObject, tClass)      : deserializeClassObject(jsonObject, tClass);  }  private static <R> R deserializeRecordObject(JsonObject jsonObject, Class<R> tClass) {    RecordDeserializationInfo<R> recordDeserializationInfo = Cache.getRecordDeserializationInfo(tClass);    if (recordDeserializationInfo == null) throw new IllegalStateException();    Object[] params = recordDeserializationInfo.getFieldsInfo().stream().map(recordComponent -> {      boolean isNullable = recordComponent.isNullable();      var value = jsonObject.get(recordComponent.name());      boolean valuePresent = value.isPresent();      if (valuePresent) {        Object valueOfActualType = extractValueFromJsonElement(value.get(), recordComponent.classTree());        return isNullable ? Optional.ofNullable(valueOfActualType) : valueOfActualType;      }      else if (isNullable) {        return Optional.empty();      }      else {        Configuration.missingRequiredValueHandler.accept(recordComponent.name(), recordComponent.dtoClass());        return null;      }    }).toArray();    return ReflectionUtil.invokeConstructor(recordDeserializationInfo.getCanonicalConstructor(), params);  }  @SuppressWarnings("unchecked")  private static <T> T deserializeClassObject(JsonObject jsonObject, Class<T> tClass) {//    ClassDeserializationInfo classDeserializationInfo = Cache.getClassDeserializationInfo(tClass);//    if (classDeserializationInfo == null) throw new IllegalStateException();////    if (classDeserializationInfo.noArgsConstructor().isPresent()) {//      T obj = (T) ReflectionUtil.invokeConstructor(classDeserializationInfo.noArgsConstructor().get());////      classDeserializationInfo.fieldsInfo().forEach(fieldInfo -> {//        var value = jsonObject.get(fieldInfo.name());//        boolean valuePresent = value.isPresent();////        if (!valuePresent && !fieldInfo.isNullable()) {//          Configuration.missingRequiredValueHandler.accept(fieldInfo.name(), fieldInfo.dtoClass());//          return;//        }//        fieldInfo.setter().ifPresent(setter -> {//          if (valuePresent) {//            Object valueOfActualType = extractValueFromJsonElement(value.get(), fieldInfo.classTree());//            ReflectionUtil.invokeInstanceMethod(obj, setter, fieldInfo.isNullable() ? Optional.of(valueOfActualType) : valueOfActualType);//          }//          else {//            ReflectionUtil.invokeInstanceMethod(obj, setter, Optional.empty());//          }//        });//      });//      return obj;//    }    throw new IllegalStateException();  }  public static Object extractValueFromJsonElement(JsonElement val, ClassTree classTree) {    return switch (val) {      case JsonObject jo -> jo.getValue(classTree);      case JsonArray ja -> ja.getCollection(classTree);      case JsonText jt -> jt.getValue((Class<?>) classTree.rawType());      case JsonNumber jn -> jn.getNumericValue((Class<? extends Number>) classTree.rawType());      case JsonBoolean jb -> jb.value();    };  }}